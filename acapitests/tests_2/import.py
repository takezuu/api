import mathimport randomimport stringimport timefrom functools import wrapsfrom API import logimport allureimport pytestimport requestsimport osfrom requests_toolbelt import MultipartEncoderfrom Pages_data.API_import_data import ImportDatafrom Pages_data.API_cases_data import CasesDatafrom data import Code, STAND_PATHfrom Pages_data.API_devices_data import DevicesDatafrom tests.decorators import DUsers, DEntities, DLicense, DCases, DDevicesworking_directory = ''def time_of_function(func):    @wraps(func)    def timeit_wrapper(*args, **kwargs):        start_time = time.perf_counter()        result = func(*args, **kwargs)        end_time = time.perf_counter()        total_time = end_time - start_time        log.info(f'Function {func.__name__} Took {total_time:.4f} seconds')        return result    return timeit_wrapperdef upload_old(i, part_size_file_upload, total_parts, file, loop_percentage, file_path, url, headers, param, case_id=None):    start = i * part_size_file_upload    end = (i + 1) * part_size_file_upload    part_id = i if i != total_parts else 0    if end >= file.st_size:        end = file.st_size        part_id = 0        log.info(f'Final part')    # CALCULATE PROGRESS    current_part_size = part_id * part_size_file_upload    total_size = total_parts * part_size_file_upload    percentage = (current_part_size / total_size) * 100    rounded_percentage = round(percentage / 10) * 10    if rounded_percentage % 10 == 0 and part_id != 0 and rounded_percentage != loop_percentage:        log.info(f'Rounded Percentage Completion: {rounded_percentage}%')        loop_percentage = rounded_percentage    # OPEN FILE    file_part = open(file_path, 'rb', ).read()[start:end]    # SET HEADERS    boundary = '------WebKitFormBoundary' + ''.join(random.choice(string.ascii_lowercase) for _ in range(16))    headers['Content-Type'] = f'multipart/form-data; boundary={boundary}'    # FORM DATA    data = {'file': (param[0], file_part, 'ofbr'),            'originSize': f'{file.st_size}',            'name': param[0],            'chunkNum': f'{part_id}',            'chunksCount': str(total_parts),            'uploadId': '2',            'noFiles': param[2]}    if part_id == 1:        data['first'] = '1'    if part_id == 0:        data['volume'] = '0'        data['department'] = '0'        data['note'] = ''        data['password'] = ''        if param[3] == 'yes':            data['case'] = f'{case_id}'        else:            data['case'] = '0'    # PREPARE WEB FROM    form_data = MultipartEncoder(fields=data, boundary=boundary)    # UPLOAD PACKETS    res = None    try:        res = requests.post(url=url + Code.API_DEVICES_UPLOAD_ASYNC, headers=headers, data=form_data)        if res.status_code != 200:            log.error(f'UPLOAD PACKETS: res.status_code {res.status_code} response: {res.json()}')            raise ConnectionError(f'status code {res.status_code} != 200')    except ConnectionError:        raise ConnectionError(f'status code {res.status_code} != 200')    return loop_percentagedef upload_odb_format(url, param, headers, case_id):    devices_index = int(working_directory[-2]) - 1    for file_name_param in [param[1], param[0]]:        file_path = working_directory + file_name_param        log.info(f'working_directory: {working_directory} file_path: {file_path} devices_index: {devices_index}')        file = os.stat(file_path)        # Calculation parts, indexes        part_size_file_upload = 131072        total_parts = (file.st_size + part_size_file_upload - 1) // part_size_file_upload        log.info(f'total_parts {total_parts}')        loop_percentage = 0        for i in range(1, total_parts + 1):            start = 0 if i == 1 else (i - 1) * part_size_file_upload            end = part_size_file_upload if i == 1 else i * part_size_file_upload            part_id = i if i != total_parts else 0            if end >= file.st_size:                end = file.st_size                part_id = 0                log.info(f'Final part')            # CALCULATE PROGRESS            current_part_size = part_id * part_size_file_upload            total_size = total_parts * part_size_file_upload            percentage = (current_part_size / total_size) * 100            rounded_percentage = round(percentage / 10) * 10            if rounded_percentage % 10 == 0 and part_id != 0 and rounded_percentage != loop_percentage:                log.info(f'Rounded Percentage Completion: {rounded_percentage}%')                loop_percentage = rounded_percentage            # OPEN FILE            file_part = open(file_path, 'rb', ).read()[start:end]            # SET HEADERS            boundary = ('------WebKitFormBoundary' +                        ''.join(random.choice(string.ascii_lowercase) for _ in range(16)))            headers['Content-Type'] = f'multipart/form-data; boundary={boundary}'            # FORM DATA            data = {'file': (file_name_param, file_part),                    'name': file_name_param,                    'part': f'{part_id}',                    'fileSize': f'{file.st_size}',                    'noFiles': param[3],                    'volume': '1'}            if part_id == 1:                data['first'] = '1'            if part_id == 0:                data['department'] = '0'                data['note'] = ''                data['password'] = ''                if file_name_param == 'test.odb':                    data['volume'] = '0'                    data['first'] = '1'                if param[4] == 'yes':                    data['case'] = f'{case_id}'                else:                    data['case'] = '0'            # PREPARE WEB FROM            form_data = MultipartEncoder(fields=data, boundary=boundary)            # UPLOAD PACKETS            res = None            try:                res = requests.post(url=url + Code.API_DEVICES_UPLOAD_ASYNC, headers=headers, data=form_data)                if res.status_code != 200:                    log.error(f'UPLOAD PACKETS: res.status_code {res.status_code} response: {res.json()}')                    raise ConnectionError(f'status code {res.status_code} != 200')            except ConnectionError:                raise ConnectionError(f'status code {res.status_code} != 200')    # CHECK queue    while True:        time.sleep(120)        res = requests.post(url=url + Code.API_QUEUE, headers=headers, json=DevicesData.queue)        log.info(f'res {res.json()}')        if res.json()['total'] == 0:            break    # GET ALL DEVICES    device_is = None    res = requests.post(url=url + Code.API_DEVICES, headers=headers, json=DevicesData.all_devices)    log.info(f'ALL DEIVCES: {res.json()["results"]}')    for device in res.json()['results']:        log.info(f'devices {device["alias"]} alias {param[2][devices_index]}')        if device['alias'] == param[2][devices_index]:            device_is = '1'            # CHECK ALIAS            try:                assert device['alias'] == param[2][devices_index], 'alias is wrong'            except AssertionError:                log.error(f'CHECK ALIAS: res {res.json()}')                raise AssertionError(f'{device} != alias')            # CHECK TOTAL            try:                assert res.json()['total'] == 9, 'total != 9'            except AssertionError:                log.error(f'CHECK TOTAL: res {res.json()}')                raise AssertionError(f'{res.json()["total"]} != 9')            if param[4] == 'yes':                CasesData.one_case['id'] = f'{case_id}'                try:                    res = requests.get(url=url + Code.API_CASES + f'/{case_id}', headers=headers,                                       json=CasesData.one_case)                    assert (res.json()['devicesId'][0]) == device['id'], 'device_id is wrong'                except AssertionError:                    log.error(f'CHECK CASE: device_id: {device["id"]} != {device["id"]}')                    raise AssertionError(f'device_id: {device["id"]} != {device["id"]}')                except KeyError:                    log.error(f'Key error: {res.json()}')        break    if device_is is None:        raise AssertionError('devise in not uploaded')    else:        returndef upload_six_formats(url, param, headers, case_id):    devices_index = int(working_directory[-2]) - 1    file_path = working_directory + param[0]    log.info(f'working_directory: {working_directory} file_path: {file_path} devices_index: {devices_index}')    file = os.stat(file_path)    # Calculation parts, indexes    part_size_file_upload = 131072    total_parts = (file.st_size + part_size_file_upload - 1) // part_size_file_upload    log.info(f'total_parts {total_parts}')    loop_percentage = 0    for i in range(1, total_parts + 1):        percentage = upload(i, part_size_file_upload, total_parts, file, loop_percentage, file_path, url, headers,                            param, case_id)        loop_percentage = percentage    # CHECK queue    while True:        time.sleep(120)        res = requests.post(url=url + Code.API_QUEUE, headers=headers, json=DevicesData.queue)        log.info(f'res {res.json()}')        if res.json()['total'] == 0:            break    # GET ALL DEVICES    device_is = None    res = requests.post(url=url + Code.API_DEVICES, headers=headers, json=DevicesData.all_devices)    log.info(f'ALL DEIVCES: {res.json()["results"]}')    for device in res.json()['results']:        log.info(f'devices {device["alias"]} alias {param[1][devices_index]}')        if device['alias'] == param[1][devices_index]:            device_is = '1'            # CHECK ALIAS            try:                assert device['alias'] == param[1][devices_index], 'alias is wrong'            except AssertionError:                log.error(f'CHECK ALIAS: res {res.json()}')                raise AssertionError(f'{device} != alias')            # CHECK TOTAL            try:                assert res.json()['total'] == 9, 'total != 9'            except AssertionError:                log.error(f'CHECK TOTAL: res {res.json()}')                raise AssertionError(f'{res.json()["total"]} != 9')            if param[3] == 'yes':                CasesData.one_case['id'] = f'{case_id}'                try:                    res = requests.get(url=url + Code.API_CASES + f'/{case_id}', headers=headers,                                       json=CasesData.one_case)                    assert (res.json()['devicesId'][0]) == device['id'], 'device_id is wrong'                except AssertionError:                    log.error(f'CHECK CASE: device_id: {device["id"]} != {device["id"]}')                    raise AssertionError(f'device_id: {device["id"]} != {device["id"]}')        break    if device_is is None:        raise AssertionError('devise in not uploaded')    else:        returndef prepare(param, volume, note=None, case_id=None, department_id=None):    devices_index = int(working_directory[-2]) - 1    file_path = working_directory + param[0]    log.info(f'working_directory: {working_directory} file_path: {file_path} devices_index: {devices_index}')    part_size_file_upload = 131072    file = os.stat(file_path)    form_data = {}    final_data = []    chunks_count = math.floor(file.st_size / part_size_file_upload)    upload_id = str(random.randint(1, 100))    if chunks_count == 0:        file_part = open(file_path, 'rb', ).read()        file_data = (param[0], file_part, 'ofbr')        form_data['volume'] = '1'        form_data['case'] = case_id        form_data['department'] = department_id        form_data['note'] = note        form_data['file'] = file_data        form_data['originSize'] = f'{file.st_size}'        form_data['name'] = param[0]        form_data['password'] = ''        form_data['chunkNum'] = '0'        form_data['chunks_count'] = '0'        form_data['uploadId'] = upload_id        form_data['noFiles'] = param[2]        final_data.append(form_data)        log.info(f'Final part')    else:        for i in range(0, chunks_count + 1):            if volume:                form_data['volume'] = '1'            if i == 0:                form_data['case'] = case_id                form_data['department'] = department_id                form_data['note'] = note            chunk_start = i * part_size_file_upload            chunk_end = (i + 1) * part_size_file_upload            file_part = open(file_path, 'rb', ).read()[chunk_start:chunk_end]            file_data = (param[0], file_part, 'ofbr')            form_data['file'] = file_data            form_data['originSize'] = f'{file.st_size}'            form_data['name'] = param[0]            form_data['password'] = ''            form_data['chunkNum'] = str(i)            form_data['chunks_count'] = str(chunks_count)            form_data['uploadId'] = upload_id            form_data['noFiles'] = param[2]            final_data.append(form_data)        return final_dataclass TestLoadImages:    @staticmethod    def _change_working_directory():        """Меняет папку с образами для тестов импорта"""        def setup(func):            wraps(func)            def inner(self, url, headers):                global working_directory                directories = ['1\\', '2\\', '3\\']                i = 0                for directory in directories:                    if os.path.exists(STAND_PATH + directory + 'stop.txt'):                        i += 1                    else:                        working_directory = STAND_PATH + directory                        with open(working_directory + 'stop.txt', 'w'):                            break                if i == 3:                    for directory in directories:                        os.remove(STAND_PATH + directory + 'stop.txt')                    working_directory = STAND_PATH + directories[0]                    with open(working_directory + 'stop.txt', 'w'):                        pass            return inner        return setup    @allure.feature('Load image page')    @allure.title('Prepare system')    @DLicense.put_new_license(folder_name='base')    @DUsers.logout_all_users()    @DEntities.delete_all_entities()    @_change_working_directory()    def test_0_clean_monitor(self, url, headers):        pass    @allure.feature('Load image page')    @allure.title('Upload .OFBX/.OFBR/.UFED/.XRY/.OST/.PST')    @pytest.mark.parametrize('param',                             [('test.ofbx', ImportData.OFBX_IMAGES, '0', 'no'),                              ('test.ofbr', ImportData.OFBR_IMAGES, '0', 'no'),                              ('test.zip', ImportData.UFED_IMAGES, '0', 'no'),                              ('test.xry', ImportData.XRY_IMAGES, '0', 'no'),                              ('test.ost', ImportData.OST_IMAGES, '0', 'no'),                              ('test.pst', ImportData.PST_IMAGES, '0', 'no'),                              ('test.ofbx', ImportData.OFBX_IMAGES, '1', 'no'),                              ('test.ofbr', ImportData.OFBR_IMAGES, '1', 'no'),                              ('test.zip', ImportData.UFED_IMAGES, '1', 'no'),                              ('test.xry', ImportData.XRY_IMAGES, '1', 'no'),                              ('test.ost', ImportData.OST_IMAGES, '1', 'no'),                              ('test.pst', ImportData.PST_IMAGES, '1', 'no'),                              ('test.ofbx', ImportData.OFBX_IMAGES, '1', 'yes'),                              ('test.ofbr', ImportData.OFBR_IMAGES, '1', 'yes'),                              ('test.zip', ImportData.UFED_IMAGES, '1', 'yes'),                              ('test.xry', ImportData.XRY_IMAGES, '1', 'yes'),                              ('test.ost', ImportData.OST_IMAGES, '1', 'yes'),                              ('test.pst', ImportData.PST_IMAGES, '1', 'yes')                              ])    @DUsers.api_login_logout_with_param()    @DCases.add_delete_case_with_param_id_for_import(case_name='TestCaseForImport')    @DDevices.delete_several_devices_case_id()    def test_load_images_001(self, url, param, headers, case_id):        upload_six_formats(url, param, headers, case_id)    @allure.feature('Load image page')    @allure.title('Upload .ODB')    @pytest.mark.skip    @pytest.mark.parametrize('param',                             [('test.odb', 'test.z01', ImportData.ODB_IMAGES, '0', 'no'),                              ('test.odb', 'test.z01', ImportData.ODB_IMAGES, '1', 'no'),                              ('test.odb', 'test.z01', ImportData.ODB_IMAGES, '1', 'yes')                              ])    @DUsers.api_login_logout_with_param()    @DCases.add_delete_case_with_param_id_for_import(case_name='TestCaseForImport')    @DDevices.delete_several_devices_case_id()    def test_load_images_002(self, url, param, headers, case_id):        upload_odb_format(url, param, headers, case_id)    @allure.feature('Load image page')    @allure.title('Prepare system for dongle')    @pytest.mark.skip    @DLicense.put_new_license(folder_name='dongle')    @DDevices.delete_several_devices()    def test_load_images_003(self, url, headers):        pass    @allure.feature('Load image page')    @allure.title('Upload .OFBX/.OFBR/.UFED/.XRY/.OST/.PST dongle')    @pytest.mark.skip    @pytest.mark.parametrize('param',                             [('test.ofbx', ImportData.OFBX_IMAGES, '0', 'no'),                              ('test.ofbr', ImportData.OFBR_IMAGES, '0', 'no'),                              ('test.zip', ImportData.UFED_IMAGES, '0', 'no'),                              ('test.xry', ImportData.XRY_IMAGES, '0', 'no'),                              ('test.ost', ImportData.OST_IMAGES, '0', 'no'),                              ('test.pst', ImportData.PST_IMAGES, '0', 'no'),                              ('test.ofbx', ImportData.OFBX_IMAGES, '1', 'no'),                              ('test.ofbr', ImportData.OFBR_IMAGES, '1', 'no'),                              ('test.zip', ImportData.UFED_IMAGES, '1', 'no'),                              ('test.xry', ImportData.XRY_IMAGES, '1', 'no'),                              ('test.ost', ImportData.OST_IMAGES, '1', 'no'),                              ('test.pst', ImportData.PST_IMAGES, '1', 'no'),                              ('test.ofbx', ImportData.OFBX_IMAGES, '1', 'yes'),                              ('test.ofbr', ImportData.OFBR_IMAGES, '1', 'yes'),                              ('test.zip', ImportData.UFED_IMAGES, '1', 'yes'),                              ('test.xry', ImportData.XRY_IMAGES, '1', 'yes'),                              ('test.ost', ImportData.OST_IMAGES, '1', 'yes'),                              ('test.pst', ImportData.PST_IMAGES, '1', 'yes')                              ])    @DUsers.api_login_logout_with_param()    @DLicense.put_new_license(folder_name='base')    @DCases.add_delete_case_with_param_id_for_import(case_name='TestCaseForImport')    @DDevices.delete_several_devices_case_id()    def test_load_images_004(self, url, param, headers, case_id):        upload_six_formats(url, param, headers, case_id)    @allure.feature('Load image page')    @allure.title('Upload .ODB dongle')    @pytest.mark.skip    @pytest.mark.parametrize('param',                             [('test.odb', 'test.z01', ImportData.ODB_IMAGES, '0', 'no'),                              ('test.odb', 'test.z01', ImportData.ODB_IMAGES, '1', 'no'),                              ('test.odb', 'test.z01', ImportData.ODB_IMAGES, '1', 'yes')                              ])    @DUsers.api_login_logout_with_param()    @DCases.add_delete_case_with_param_id_for_import(case_name='TestCaseForImport')    @DDevices.delete_several_devices_case_id()    def test_load_images_005(self, url, param, headers, case_id):        upload_odb_format(url, param, headers, case_id)    @allure.feature('Load image page')    @allure.title('Upload .OFBX/.OFBR/.UFED/.XRY/.OST/.PST big images')    @pytest.mark.skip    @pytest.mark.parametrize('param',                             [                                 (                                         'Android image (Samsung Galaxy S6 LTE-A (SM-G920V)) 17.03.2020 14_44_08.ofbx',                                         ImportData.OFBX_BIG, '1', 'no'),                                 ('Guindo 01_09_2020 07_58_27_adam.ofbr',                                  ImportData.OFBR_BIG, '1', 'no'),                             ])    @DUsers.api_login_logout_with_param()    @DCases.add_delete_case_with_param_id_for_import(case_name='TestCaseForImport')    @DDevices.delete_several_devices_case_id()    def test_load_images_006(self, url, param, headers, case_id):        working_directory_big = 'C:\\Test_data\\4\\'        file_path = working_directory_big + param[0]        log.info(f'working_directory: {working_directory_big} file_path: {file_path}')        file = os.stat(file_path)        # Calculation parts, indexes        part_size_file_upload = 131072        total_parts = (file.st_size + part_size_file_upload - 1) // part_size_file_upload        log.info(f'total_parts {total_parts}')        loop_percentage = 0        for i in range(1, total_parts + 1):            percentage = upload(i, part_size_file_upload, total_parts, file, loop_percentage, file_path, url, headers,                                param,                                case_id)            loop_percentage = percentage        # CHECK queue        device_id = None        while True:            res = requests.post(url=url + Code.API_QUEUE, headers=headers, json=DevicesData.queue)            if device_id is None and res.json()['results'][0]['id'] not in [1, 2, 3, 4, 5, 6, 7, 8]:                device_id = res.json()['results'][0]['id']                try:                    res = requests.delete(url=url + Code.API_QUEUE + f'{device_id}', headers=headers)                    assert res.status_code == 200, 'status != 200'                    log.error(f'CHECK QUEUE: delete device status code {res.status_code} != 200')                    break                except AssertionError:                    raise AssertionError(f'delete device status code {res.status_code} != 200')